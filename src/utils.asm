section .data
    newline db 0xA, 0        ; Символ новой строки для вывода

section .text

global print_string          ; Функция для вывода строки
global max                   ; Функция для нахождения максимума
global delay                 ; Функция для задержки выполнения

;==========================
; Функция print_string
; Выводит строку на экран
; Входные параметры:
; rdi - указатель на строку (NULL-терминированная)
;==========================
print_string:
    ; Используем системный вызов для вывода
    mov rax, 1               ; Системный вызов для sys_write
    mov rdi, 1               ; Дескриптор stdout
    mov rsi, rdi             ; Указатель на строку
    ; Находим длину строки
    xor rcx, rcx
.loop:
    cmp byte [rsi + rcx], 0
    je .done
    inc rcx
    jmp .loop
.done:
    ; Теперь rcx содержит длину строки
    syscall                   ; Выполняем системный вызов
    ; Выводим новую строку
    mov rax, 1
    mov rdi, 1
    lea rsi, [newline]
    mov rdx, 1               ; Указатель на длину новой строки
    syscall
    ret

;==========================
; Функция max
; Возвращает максимальное из двух чисел
; Входные параметры:
; rdi - первое число
; rsi - второе число
; Выход:
; rax - максимум из двух чисел
;==========================
max:
    cmp rdi, rsi             ; Сравниваем два числа
    jge .return_first        ; Если первое больше или равно, возвращаем его
    mov rax, rsi             ; В противном случае возвращаем второе
    ret
.return_first:
    mov rax, rdi
    ret

;==========================
; Функция delay
; Задерживает выполнение программы на заданное количество миллисекунд
; Входные параметры:
; rdi - количество миллисекунд
;==========================
delay:
    ; Простой busy waiting
    mov rcx, rdi             ; Сохраняем количество миллисекунд
.delay_loop:
    ; Задержка на 1 миллисекунду (нужно откалибровать для вашей архитектуры)
    mov rax, 100000          ; Параметры задержки (псевдокод)
    .inner_delay:
        dec rax
        jnz .inner_delay
    dec rcx
    jnz .delay_loop
    ret